@inject ConnectFour.Shared.GameState State

<HeadContent>
	<style>
		:root {
			--board-bg: yellow; 	/** the color of the board **/
			--player1: blue;		/** Player 1's piece color **/
			--player2: red;			/** Player 2's piece color **/
		}
	</style>
</HeadContent>

<nav>
    <span title="Click to play a piece" @onclick="() => PlayPiece(0)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(1)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(2)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(3)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(4)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(5)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(6)">🔽</span>
</nav>

<article>
    @winnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
            <span class="@pieces[i]"></span>
        }
    </div>
</div>

@for (var i = 0; i < 42; i++)
{
//    <span class="@pieces[i]"></span>
}

@code {
    string[] pieces = new string[42];
    string winnerMessage = string.Empty;
    string errorMessage = string.Empty;

    string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    protected override void OnInitialized() => State.ResetBoard();

    void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        
        try
        {
            var landingRow = State.PlayPiece(col);
            var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
            pieces[State.CurrentTurn - 1] = cssClass;
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }

        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }
}
